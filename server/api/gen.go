// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// EntryResponse defines model for EntryResponse.
type EntryResponse struct {
	TicketId openapi_types.UUID `json:"ticketId"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// ExitResponse defines model for ExitResponse.
type ExitResponse struct {
	Charge                float32 `json:"charge"`
	ParkedDurationMinutes int     `json:"parkedDurationMinutes"`
	ParkingLot            int     `json:"parkingLot"`
	Plate                 string  `json:"plate"`
}

// PostEntryParams defines parameters for PostEntry.
type PostEntryParams struct {
	Plate      string `form:"plate" json:"plate"`
	ParkingLot int    `form:"parkingLot" json:"parkingLot"`
}

// PostExitParams defines parameters for PostExit.
type PostExitParams struct {
	TicketId string `form:"ticketId" json:"ticketId"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Record vehicle entry and generate ticket
	// (POST /entry)
	PostEntry(c *gin.Context, params PostEntryParams)
	// Calculate fee and complete vehicle exit
	// (POST /exit)
	PostExit(c *gin.Context, params PostExitParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostEntry operation middleware
func (siw *ServerInterfaceWrapper) PostEntry(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEntryParams

	// ------------- Required query parameter "plate" -------------

	if paramValue := c.Query("plate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument plate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "plate", c.Request.URL.Query(), &params.Plate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter plate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "parkingLot" -------------

	if paramValue := c.Query("parkingLot"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument parkingLot is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "parkingLot", c.Request.URL.Query(), &params.ParkingLot)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter parkingLot: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEntry(c, params)
}

// PostExit operation middleware
func (siw *ServerInterfaceWrapper) PostExit(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostExitParams

	// ------------- Required query parameter "ticketId" -------------

	if paramValue := c.Query("ticketId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ticketId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ticketId", c.Request.URL.Query(), &params.TicketId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ticketId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostExit(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/entry", wrapper.PostEntry)
	router.POST(options.BaseURL+"/exit", wrapper.PostExit)
}
